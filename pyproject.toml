[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "lyric-ninja"
version = "0.1.0"
description = "A Python library for automatic lyric-to-audio alignment using machine learning"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = ["lyrics", "audio", "alignment", "music", "machine-learning", "speech", "synchronization"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Multimedia :: Sound/Audio :: Analysis",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "coremltools>=8.3.0",
    "librosa>=0.11.0",
    "mlx>=0.26.1",
    "mutagen>=1.47.0",
    "noisereduce>=3.0.3",
    "numba>=0.61.2",
    "onnxruntime>=1.22.0",
    "replicate>=1.0.7",
    "rich>=14.0.0",
    "torchaudio>=0.11.0,<2.2",
    "numpy<2",
    "pip",
    "ruff>=0.12.2",
    "demucs",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "black>=22.0",
    "isort>=5.0",
    "flake8>=5.0",
    "mypy>=1.0",
]
docs = [
    "sphinx>=5.0",
    "sphinx-rtd-theme>=1.0",
]

[project.urls]
"Homepage" = "https://github.com/DeepNeuralDog/lyric_ninja"
"Bug Reports" = "https://github.com/DeepNeuralDog/lyric_ninja/issues"
"Source" = "https://github.com/DeepNeuralDog/lyric_ninja"

[project.scripts]
lyric-ninja = "lyric_ninja.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["lyric_ninja*", "converter*", "lyric_aligner*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
lyric_ninja = ["*.txt", "*.md"]
converter = ["*.txt", "*.md"]
lyric_aligner = ["*.txt", "*.md"]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["lyric_ninja", "converter", "lyric_aligner"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--cov=lyric_ninja --cov=converter --cov=lyric_aligner --cov-report=term-missing --cov-report=html"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "audio_separator.*",
    "mutagen.*",
    "librosa.*",
    "mlx.*",
    "numba.*",
    "rich.*",
]
ignore_missing_imports = true

[tool.uv.sources]
demucs = { git = "https://github.com/adefossez/demucs.git" }
